/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "./context"
import * as prisma from ".prisma/client/index"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CarrierWhereUniqueInput: { // input type
    carrierID?: number | null; // Int
  }
  CartCartItemOrderByInput: { // input type
    carrierID?: NexusGenEnums['SortOrder'] | null; // SortOrder
  }
  CartWhereUniqueInput: { // input type
    cartID?: number | null; // Int
  }
  FloatNullableFilter: { // input type
    equals?: number | null; // Float
    gt?: number | null; // Float
    gte?: number | null; // Float
    in?: number[] | null; // [Float!]
    lt?: number | null; // Float
    lte?: number | null; // Float
    not?: NexusGenInputs['NestedFloatNullableFilter'] | null; // NestedFloatNullableFilter
    notIn?: number[] | null; // [Float!]
  }
  Login: { // input type
    name: string; // String!
    password: string; // String!
  }
  NestedFloatNullableFilter: { // input type
    equals?: number | null; // Float
    gt?: number | null; // Float
    gte?: number | null; // Float
    in?: number[] | null; // [Float!]
    lt?: number | null; // Float
    lte?: number | null; // Float
    not?: NexusGenInputs['NestedFloatNullableFilter'] | null; // NestedFloatNullableFilter
    notIn?: number[] | null; // [Float!]
  }
  NestedStringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: NexusGenInputs['NestedStringFilter'] | null; // NestedStringFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  NestedStringNullableFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: NexusGenInputs['NestedStringNullableFilter'] | null; // NestedStringNullableFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  QueryCarriersWhereInput: { // input type
    lat?: NexusGenInputs['FloatNullableFilter'] | null; // FloatNullableFilter
    lng?: NexusGenInputs['FloatNullableFilter'] | null; // FloatNullableFilter
    origin?: NexusGenInputs['StringNullableFilter'] | null; // StringNullableFilter
    type?: NexusGenInputs['StringFilter'] | null; // StringFilter
  }
  StringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: NexusGenInputs['NestedStringFilter'] | null; // NestedStringFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  StringNullableFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: NexusGenInputs['NestedStringNullableFilter'] | null; // NestedStringNullableFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  YearMonth: { // input type
    month: number; // Int!
    year: number; // Int!
  }
}

export interface NexusGenEnums {
  SortOrder: prisma.SortOrder
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Carrier: prisma.Carrier;
  CarrierPhoto: prisma.CarrierPhoto;
  Cart: prisma.Cart;
  District: prisma.District;
  Mutation: {};
  Offer: prisma.Offer;
  Period: prisma.Period;
  PeriodsOfOffer: prisma.PeriodsOfOffer;
  Query: {};
  Region: prisma.Region;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Carrier: { // field return type
    carrierID: number; // Int!
    city: string | null; // String
    description: string | null; // String
    District: NexusGenRootTypes['District'] | null; // District
    lat: number | null; // Float
    lng: number | null; // Float
    orientation: number | null; // Int
    photos: NexusGenRootTypes['CarrierPhoto'][]; // [CarrierPhoto!]!
    Region: NexusGenRootTypes['Region'] | null; // Region
    size: number | null; // Float
    street: string | null; // String
    type: string; // String!
  }
  CarrierPhoto: { // field return type
    carrierID: number; // Int!
    order: number; // Int!
    src: string; // String!
  }
  Cart: { // field return type
    cartID: number; // Int!
    CartItem: NexusGenRootTypes['Carrier'][]; // [Carrier!]!
    email: string; // String!
    PeriodEnd: NexusGenRootTypes['Period']; // Period!
    PeriodStart: NexusGenRootTypes['Period']; // Period!
  }
  District: { // field return type
    district: string; // String!
    districtID: number; // Int!
  }
  Mutation: { // field return type
    saveCart: NexusGenRootTypes['Cart'] | null; // Cart
  }
  Offer: { // field return type
    offerID: number; // Int!
    title: string; // String!
  }
  Period: { // field return type
    from: NexusGenScalars['DateTime']; // DateTime!
    periodID: number; // Int!
    text: string; // String!
    till: NexusGenScalars['DateTime']; // DateTime!
  }
  PeriodsOfOffer: { // field return type
    period: NexusGenRootTypes['Period']; // Period!
  }
  Query: { // field return type
    carrier: NexusGenRootTypes['Carrier'] | null; // Carrier
    carriers: NexusGenRootTypes['Carrier'][]; // [Carrier!]!
    cart: NexusGenRootTypes['Cart'] | null; // Cart
    carts: NexusGenRootTypes['Cart'][]; // [Cart!]!
    clientOffer: NexusGenRootTypes['Offer'] | null; // Offer
    running: string | null; // String
  }
  Region: { // field return type
    region: string; // String!
    regionID: number; // Int!
  }
}

export interface NexusGenFieldTypeNames {
  Carrier: { // field return type name
    carrierID: 'Int'
    city: 'String'
    description: 'String'
    District: 'District'
    lat: 'Float'
    lng: 'Float'
    orientation: 'Int'
    photos: 'CarrierPhoto'
    Region: 'Region'
    size: 'Float'
    street: 'String'
    type: 'String'
  }
  CarrierPhoto: { // field return type name
    carrierID: 'Int'
    order: 'Int'
    src: 'String'
  }
  Cart: { // field return type name
    cartID: 'Int'
    CartItem: 'Carrier'
    email: 'String'
    PeriodEnd: 'Period'
    PeriodStart: 'Period'
  }
  District: { // field return type name
    district: 'String'
    districtID: 'Int'
  }
  Mutation: { // field return type name
    saveCart: 'Cart'
  }
  Offer: { // field return type name
    offerID: 'Int'
    title: 'String'
  }
  Period: { // field return type name
    from: 'DateTime'
    periodID: 'Int'
    text: 'String'
    till: 'DateTime'
  }
  PeriodsOfOffer: { // field return type name
    period: 'Period'
  }
  Query: { // field return type name
    carrier: 'Carrier'
    carriers: 'Carrier'
    cart: 'Cart'
    carts: 'Cart'
    clientOffer: 'Offer'
    running: 'String'
  }
  Region: { // field return type name
    region: 'String'
    regionID: 'Int'
  }
}

export interface NexusGenArgTypes {
  Cart: {
    CartItem: { // args
      orderBy?: NexusGenInputs['CartCartItemOrderByInput'][] | null; // [CartCartItemOrderByInput!]
    }
  }
  Mutation: {
    saveCart: { // args
      adsMotive: string[]; // [String!]!
      carriersID: number[]; // [Int!]!
      email: string; // String!
      end: NexusGenInputs['YearMonth']; // YearMonth!
      familyName: string; // String!
      givenName: string; // String!
      goal?: string | null; // String
      info?: string | null; // String
      organization?: string | null; // String
      start: NexusGenInputs['YearMonth']; // YearMonth!
    }
  }
  Query: {
    carrier: { // args
      where: NexusGenInputs['CarrierWhereUniqueInput']; // CarrierWhereUniqueInput!
    }
    carriers: { // args
      after?: NexusGenInputs['CarrierWhereUniqueInput'] | null; // CarrierWhereUniqueInput
      before?: NexusGenInputs['CarrierWhereUniqueInput'] | null; // CarrierWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      where?: NexusGenInputs['QueryCarriersWhereInput'] | null; // QueryCarriersWhereInput
    }
    cart: { // args
      where: NexusGenInputs['CartWhereUniqueInput']; // CartWhereUniqueInput!
    }
    carts: { // args
      after?: NexusGenInputs['CartWhereUniqueInput'] | null; // CartWhereUniqueInput
      before?: NexusGenInputs['CartWhereUniqueInput'] | null; // CartWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    clientOffer: { // args
      login?: NexusGenInputs['Login'] | null; // Login
      offerID: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}